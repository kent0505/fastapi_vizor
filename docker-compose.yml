services:
  # bot:
  #   build: ./bot
  #   container_name: aiogram
  #   env_file:
  #     - .env
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  app:
    build: ./app
    container_name: fastapi-app
    ports:
      - "8000:8000"
    env_file:
      - .env
    # depends_on:
    #   - db
    # depends_on:
    #   rabbitmq:
    #     condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: rabbitmq-diagnostics -q ping
  #     interval: 20s
  #     timeout: 20s
  #     retries: 3
  
  # eng:
  #   build: ./eng
  #   container_name: fastapi-eng
  #   ports:
  #     - "8001:8000"
  #   env_file:
  #     - .env
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

# docker-compose up -d
